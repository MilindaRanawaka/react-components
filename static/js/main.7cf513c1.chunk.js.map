{"version":3,"sources":["components/Button/Button.jsx","components/Button/index.js","App.js","reportWebVitals.js","index.js"],"names":["Button","title","type","onClick","styles","className","disabled","props","dynamicClassName","includes","getClassName","style","PropTypes","string","func","object","bool","defaultProps","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kUAIMA,EAAS,SAAC,GAQT,IAPNC,EAOK,EAPLA,MACAC,EAMK,EANLA,KACAC,EAKK,EALLA,QACAC,EAIK,EAJLA,OACAC,EAGK,EAHLA,UACAC,EAEK,EAFLA,SACGC,EACE,iBAUL,OACC,gDACCF,UAXmB,WACpB,IAAIG,EAAgB,wBACnBF,IAAaJ,EAAKO,SAAS,YAAcP,EAAO,YAAcA,GAK/D,OAHIG,IACHG,GAAgB,WAAQH,IAElBG,EAIKE,GACXC,MAAOP,EACPE,SAAUA,EACVH,QAASA,GACLI,GALL,aAMEN,MAKJW,IAAUZ,OAAS,CAClBC,MAAOW,IAAUC,OACjBV,QAASS,IAAUE,KACnBV,OAAQQ,IAAUG,OAClBV,UAAWO,IAAUC,OACrBP,SAAUM,IAAUI,MAGrBhB,EAAOiB,aAAe,CACrBhB,MAAO,SACPC,KAAM,GACNI,UAAU,GAGIN,QC9CAA,ICWAkB,MATf,WACC,OACC,gCACC,qDACA,cAAC,EAAD,CAAQjB,MAAM,iBCIFkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACR,cAAC,IAAMC,WAAP,UACC,cAAC,EAAD,MAEDC,SAASC,eAAe,SAMzBb,M","file":"static/js/main.7cf513c1.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Button.styles.scss';\n\nconst Button = ({\n\ttitle,\n\ttype,\n\tonClick,\n\tstyles,\n\tclassName,\n\tdisabled,\n\t...props\n}) => {\n\tconst getClassName = () => {\n\t\tlet dynamicClassName = `button button-${\n\t\t\tdisabled && !type.includes('disabled') ? type + '-disabled' : type\n\t\t}`;\n\t\tif (className) {\n\t\t\tdynamicClassName += ` ${className}`;\n\t\t}\n\t\treturn dynamicClassName;\n\t};\n\treturn (\n\t\t<button\n\t\t\tclassName={getClassName()}\n\t\t\tstyle={styles}\n\t\t\tdisabled={disabled}\n\t\t\tonClick={onClick}\n\t\t\t{...props}>\n\t\t\t{title}\n\t\t</button>\n\t);\n};\n\nPropTypes.Button = {\n\ttitle: PropTypes.string,\n\tonClick: PropTypes.func,\n\tstyles: PropTypes.object,\n\tclassName: PropTypes.string,\n\tdisabled: PropTypes.bool\n};\n\nButton.defaultProps = {\n\ttitle: 'Button',\n\ttype: '',\n\tdisabled: false\n};\n\nexport default Button;\n","import Button from './Button';\n\nexport default Button;\nexport const PrimaryButton = (props) => <Button {...props} type='primary' />;\nexport const SecondaryButton = (props) => (\n\t<Button {...props} type='secondary' />\n);\nexport const DangerButton = (props) => <Button {...props} type='danger' />;\nexport const SuccessButton = (props) => <Button {...props} type='success' />;\nexport const WarningButton = (props) => <Button {...props} type='warning' />;\nexport const InfoButton = (props) => <Button {...props} type='info' />;\nexport const LightButton = (props) => <Button {...props} type='light' />;\nexport const DarkButton = (props) => <Button {...props} type='dark' />;\nexport const LinkButton = (props) => <Button {...props} type='link' />;\nexport const OutlineButton = (props) => <Button {...props} type='outline' />;\nexport const OutlinePrimaryButton = (props) => (\n\t<Button {...props} type='outline-primary' />\n);\nexport const OutlineSecondaryButton = (props) => (\n\t<Button {...props} type='outline-secondary' />\n);\nexport const OutlineDangerButton = (props) => (\n\t<Button {...props} type='outline-danger' />\n);\nexport const OutlineSuccessButton = (props) => (\n\t<Button {...props} type='outline-success' />\n);\nexport const OutlineWarningButton = (props) => (\n\t<Button {...props} type='outline-warning' />\n);\nexport const OutlineInfoButton = (props) => (\n\t<Button {...props} type='outline-info' />\n);\nexport const OutlineLightButton = (props) => (\n\t<Button {...props} type='outline-light' />\n);\nexport const OutlineDarkButton = (props) => (\n\t<Button {...props} type='outline-dark' />\n);\nexport const OutlineLinkButton = (props) => (\n\t<Button {...props} type='outline-link' />\n);\n\nexport const ButtonBlock = (props) => <Button {...props} type='block' />;\n","import React from 'react';\nimport './App.css';\nimport Button from './components/Button';\n\nfunction App() {\n\treturn (\n\t\t<div>\n\t\t\t<h1>Components showcase</h1>\n\t\t\t<Button title='Click me' />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}